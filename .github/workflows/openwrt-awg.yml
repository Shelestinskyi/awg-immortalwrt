name: Create Release Mediatek Filogic

on:
  workflow_dispatch:  # Добавляет возможность вручного запуска
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: "v${{ github.ref_name }} - ${{ matrix.build_env.pkgarch }} :: ${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }} build"
    runs-on: self-hosted  # Измените на доступный образ
    strategy:
      matrix:
        build_env:
          - pkgarch: aarch64_cortex-a53
            target: mediatek
            subtarget: filogic

    steps:
      - uses: actions/checkout@v4
        with:
          repository: immortalwrt/immortalwrt
          ref: ${{ github.ref }}  # Используйте текущий тег или ветку
          fetch-depth: 0

      - name: Update and install feeds for ImmortalWRT ${{ github.ref_name }} ${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}
        run: |
          pkgarch=${{ matrix.build_env.pkgarch }}
          target=${{ matrix.build_env.target }}
          subtarget=${{ matrix.build_env.subtarget }}

          echo "pkgarch: ${pkgarch}, target: ${target}, subtarget: ${subtarget}"

          rm -rf bin/packages/${pkgarch}/awgopenwrt/ || true
          rm -rf bin/targets/${target}/${subtarget}/packages/ || true

          wget https://downloads.immortalwrt.org/releases/${{ github.ref_name }}/targets/${target}/${subtarget}/feeds.buildinfo -O feeds.conf

          echo "src-git awgopenwrt https://github.com/lolo6oT/awg-openwrt.git" >> ./feeds.conf

          ./scripts/feeds update -a
          ./scripts/feeds install -a

          wget https://downloads.immortalwrt.org/releases/${{ github.ref_name }}/targets/${target}/${subtarget}/config.buildinfo -O .config

          make defconfig

      - name: Build ImmortalWRT ${{ github.ref_name }} ${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}
        run: |
          export FORCE_UNSAFE_CONFIGURE=1
          echo "CONFIG_PACKAGE_kmod-amneziawg=m" >> .config
          echo "CONFIG_PACKAGE_amneziawg-tools=y" >> .config
          echo "CONFIG_PACKAGE_luci-proto-amneziawg=y" >> .config
          echo "CONFIG_PACKAGE_amneziawg-go=y" >> .config

          if [[ $(uname -m) == "aarch64" ]]; then
            echo 'CONFIG_GOLANG_EXTERNAL_BOOTSTRAP_ROOT="/usr/local/go/bin/go"' >> .config
            echo 'CONFIG_GOLANG_BUILD_CACHE_DIR=""' >> .config
          fi

          make defconfig
          make tools/install -i -j $(nproc)
          make toolchain/install -i -j $(nproc)
          make target/linux/compile -i -j $(nproc)

      - name: Build IPK packages
        run: |
          make -j $(nproc) package/amneziawg-tools/{clean,download,prepare,compile}
          make -j $(nproc) package/amneziawg-go/{clean,download,prepare,compile}
          make -j $(nproc) package/kmod-amneziawg/{clean,download,prepare,compile}
          make -j $(nproc) package/luci-proto-amneziawg/{clean,download,prepare,compile}

      - name: Prepare artifacts
        run: |
          tag_name=${{ github.ref_name }}
          mkdir -p awgrelease
          postfix="${tag_name}_v${{ github.ref_name }}_${{ matrix.build_env.pkgarch }}_${{ matrix.build_env.target }}_${{ matrix.build_env.subtarget }}"
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-tools_*.ipk awgrelease/amneziawg-tools_${postfix}.ipk || true
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/amneziawg-go_*.ipk awgrelease/amneziawg-go_${postfix}.ipk || true
          cp bin/packages/${{ matrix.build_env.pkgarch }}/awgopenwrt/luci-proto-amneziawg_*.ipk awgrelease/luci-proto-amneziawg_${postfix}.ipk || true
          cp bin/targets/${{ matrix.build_env.target }}/${{ matrix.build_env.subtarget }}/packages/kmod-amneziawg_*.ipk awgrelease/kmod-amneziawg_${postfix}.ipk || true

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: awgrelease/*.ipk

      - name: Cleanup
        run: |
          rm feeds.conf || true
          rm -rf awgrelease || true
